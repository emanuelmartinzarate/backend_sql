#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('backend-apirestful:server');
const http = require('http');
const { Server } = require("socket.io");
const axios = require('axios');


/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Setting socket.io
 */
const io = new Server(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

io.on('connection', socket => {
  socket.on('add', data => {
    const product = {
      name:data.name,
      price:data.price,
      thumbnail:data.thumbnail,
      username:data.username
    }
    
    axios
    .post('http://localhost:3000/api/products/', product)
    .then(res => {
      console.log(`statusCode: ${res.status}`);
    })
    .catch(error => {
      console.error(error);
    });

    io.sockets.emit('show', `ok`)
  })

  socket.on('chat-in', data => {

    const dataOut = {
        msn: data.msn,
        username: data.username
    }
    console.log(dataOut)

    axios
    .post('http://localhost:3000/api/chat/', dataOut)
    .then(res => {
      console.log(`statusCode: ${res.status}`);
    })
    .catch(error => {
      console.error(error);
    });

    io.sockets.emit('chat-out', `ok`)
  })
})